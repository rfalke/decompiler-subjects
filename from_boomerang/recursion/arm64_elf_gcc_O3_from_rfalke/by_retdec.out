Running phase: Unpacking ( some time )
No matching plugins found for 'GCC 6.3.0'
No matching plugins found for 'gc'
Running phase: Initialization ( some time )
Running phase: Providers initialization ( some time )
Running phase: Input binary to LLVM IR decoding ( some time )
Running phase: LLVM ( some time )
Running phase: x86 address spaces optimization ( some time )
Running phase: x87 fpu register analysis ( some time )
Running phase: Main function identification optimization ( some time )
Running phase: Libgcc idioms optimization ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Conditional branch optimization ( some time )
Running phase: Syscalls optimization ( some time )
Running phase: Stack optimization ( some time )
Running phase: Constants optimization ( some time )
Running phase: Function parameters and returns optimization ( some time )
Running phase: LLVM instruction optimization using RDA ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Simple types recovery optimization ( some time )
Running phase: Disassembly generation ( some time )
Running phase: Assembly mapping instruction removal ( some time )
Running phase: C++ class hierarchy optimization ( some time )
Running phase: Selected functions optimization ( some time )
Running phase: Unreachable functions optimization ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Make all registers local ( some time )
Running phase: Value protection optimization ( some time )
Running phase: LLVM ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Simple types recovery optimization ( some time )
Running phase: Stack pointer operations optimization ( some time )
Running phase: Instruction idioms optimization ( some time )
Running phase: LLVM ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Instruction idioms optimization ( some time )
Running phase: Phi removal ( some time )
Running phase: LLVM ( some time )
Running phase: Value protection optimization ( some time )
Running phase: Generate the current LLVM IR ( some time )
Running phase: Generate the current bitcode ( some time )
Running phase: LLVM IR -> HLL ( some time )
Running phase: initialization ( some time )
 -> loading the input config ( some time )
 -> creating the used HLL writer [c] ( some time )
 -> creating the used alias analysis [simple] ( some time )
 -> creating the used call info obtainer [optim] ( some time )
 -> creating the used evaluator of arithmetical expressions [c] ( some time )
 -> creating the used variable names generator [fruit] ( some time )
 -> creating the used variable renamer [readable] ( some time )
 -> creating the used semantics [libc,gcc-general,win-api] ( some time )
Running phase: conversion of LLVM IR into BIR ( some time )
 -> converting global variables ( some time )
 -> converting function _init ( some time )
 -> converting function function_6a0 ( some time )
 -> converting function function_6b0 ( some time )
 -> converting function function_6c0 ( some time )
 -> converting function function_6d0 ( some time )
 -> converting function function_6e0 ( some time )
 -> converting function main ( some time )
 -> converting function _start ( some time )
 -> converting function call_weak_fn ( some time )
 -> converting function deregister_tm_clones ( some time )
 -> converting function register_tm_clones ( some time )
 -> converting function __do_global_dtors_aux ( some time )
 -> converting function frame_dummy ( some time )
 -> converting function function_878 ( some time )
 -> converting function g ( some time )
 -> converting function c ( some time )
 -> converting function function_9b8 ( some time )
 -> converting function function_a28 ( some time )
 -> converting function function_a60 ( some time )
 -> converting function function_a88 ( some time )
 -> converting function function_ac0 ( some time )
 -> converting function e ( some time )
 -> converting function function_b28 ( some time )
 -> converting function function_b68 ( some time )
 -> converting function function_b98 ( some time )
 -> converting function function_bc8 ( some time )
 -> converting function function_c00 ( some time )
 -> converting function f ( some time )
 -> converting function b ( some time )
 -> converting function function_ea8 ( some time )
 -> converting function function_ee8 ( some time )
 -> converting function function_f18 ( some time )
 -> converting function function_f48 ( some time )
 -> converting function function_f80 ( some time )
 -> converting function d ( some time )
 -> converting function function_1030 ( some time )
 -> converting function function_1070 ( some time )
 -> converting function function_10a0 ( some time )
 -> converting function function_10e0 ( some time )
 -> converting function function_1110 ( some time )
 -> converting function h ( some time )
 -> converting function i ( some time )
 -> converting function j ( some time )
 -> converting function k ( some time )
 -> converting function function_12a0 ( some time )
 -> converting function function_12e0 ( some time )
 -> converting function function_1310 ( some time )
 -> converting function function_1350 ( some time )
 -> converting function function_1380 ( some time )
 -> converting function l ( some time )
 -> converting function function_1438 ( some time )
 -> converting function function_1468 ( some time )
 -> converting function function_14a8 ( some time )
 -> converting function function_14d8 ( some time )
 -> converting function __libc_csu_init ( some time )
 -> converting function __libc_csu_fini ( some time )
 -> converting function _fini ( some time )
Running phase: removing functions from standard libraries ( some time )
Running phase: removing code that is not reachable in a CFG ( some time )
Running phase: signed/unsigned types fixing ( some time )
Running phase: converting LLVM intrinsic functions to standard functions ( some time )
Running phase: obtaining debug information ( some time )
Running phase: alias analysis [simple] ( some time )
Running phase: optimizations ( some time )
 -> running GotoStmtOptimizer ( some time )
 -> running RemoveUselessCastsOptimizer ( some time )
 -> running UnusedGlobalVarOptimizer ( some time )
 -> running DeadLocalAssignOptimizer ( some time )
 -> running SimpleCopyPropagationOptimizer ( some time )
 -> running CopyPropagationOptimizer ( some time )
 -> running SimplifyArithmExprOptimizer ( some time )
 -> running IfStructureOptimizer ( some time )
 -> running LoopLastContinueOptimizer ( some time )
 -> running PreWhileTrueLoopConvOptimizer ( some time )
 -> running WhileTrueToForLoopOptimizer ( some time )
 -> running WhileTrueToWhileCondOptimizer ( some time )
 -> running IfBeforeLoopOptimizer ( some time )
 -> running LLVMIntrinsicsOptimizer ( some time )
 -> running VoidReturnOptimizer ( some time )
 -> running BreakContinueReturnOptimizer ( some time )
 -> running BitShiftOptimizer ( some time )
 -> running DerefAddressOptimizer ( some time )
 -> running EmptyArrayToStringOptimizer ( some time )
 -> running BitOpToLogOpOptimizer ( some time )
 -> running SimplifyArithmExprOptimizer ( some time )
 -> running UnusedGlobalVarOptimizer ( some time )
 -> running DeadLocalAssignOptimizer ( some time )
 -> running SimpleCopyPropagationOptimizer ( some time )
 -> running CopyPropagationOptimizer ( some time )
 -> running SelfAssignOptimizer ( some time )
 -> running VarDefForLoopOptimizer ( some time )
 -> running VarDefStmtOptimizer ( some time )
 -> running EmptyStmtOptimizer ( some time )
 -> running GotoStmtOptimizer ( some time )
 -> running SimplifyArithmExprOptimizer ( some time )
 -> running DeadCodeOptimizer ( some time )
 -> running DerefToArrayIndexOptimizer ( some time )
 -> running IfToSwitchOptimizer ( some time )
 -> running CCastOptimizer ( some time )
 -> running CArrayArgOptimizer ( some time )
Running phase: variable renaming [readable] ( some time )
Running phase: converting constants to symbolic names ( some time )
Running phase: module validation ( some time )
 -> running BreakOutsideLoopValidator ( some time )
 -> running NoGlobalVarDefValidator ( some time )
 -> running ReturnValidator ( some time )
Running phase: emission of the target code [c] ( some time )
Running phase: finalization ( some time )
Running phase: cleanup ( some time )
