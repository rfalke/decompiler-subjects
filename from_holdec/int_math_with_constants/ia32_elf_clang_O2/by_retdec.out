Running phase: Unpacking ( some time )
No matching plugins found for 'LLVM 3.9.1'
No matching plugins found for 'GCC 6.4.1'
No matching plugins found for 'GCC 4.6.3'
Running phase: Initialization ( some time )
Running phase: Providers initialization ( some time )
Running phase: Input binary to LLVM IR decoding ( some time )
Running phase: LLVM ( some time )
Running phase: x86 address spaces optimization ( some time )
Running phase: x87 fpu register analysis ( some time )
Running phase: Main function identification optimization ( some time )
Running phase: Libgcc idioms optimization ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Conditional branch optimization ( some time )
Running phase: Syscalls optimization ( some time )
Running phase: Stack optimization ( some time )
Running phase: Constants optimization ( some time )
Running phase: Function parameters and returns optimization ( some time )
Running phase: LLVM instruction optimization using RDA ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Simple types recovery optimization ( some time )
Running phase: Disassembly generation ( some time )
Running phase: Assembly mapping instruction removal ( some time )
Running phase: C++ class hierarchy optimization ( some time )
Running phase: Selected functions optimization ( some time )
Running phase: Unreachable functions optimization ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Make all registers local ( some time )
Running phase: Value protection optimization ( some time )
Running phase: LLVM ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Simple types recovery optimization ( some time )
Running phase: Stack pointer operations optimization ( some time )
Running phase: Instruction idioms optimization ( some time )
Running phase: LLVM ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Instruction idioms optimization ( some time )
Running phase: Phi removal ( some time )
Running phase: LLVM ( some time )
Running phase: Value protection optimization ( some time )
Running phase: Generate the current LLVM IR ( some time )
Running phase: Generate the current bitcode ( some time )
Running phase: LLVM IR -> HLL ( some time )
Running phase: initialization ( some time )
 -> loading the input config ( some time )
 -> creating the used HLL writer [c] ( some time )
 -> creating the used alias analysis [simple] ( some time )
 -> creating the used call info obtainer [optim] ( some time )
 -> creating the used evaluator of arithmetical expressions [c] ( some time )
 -> creating the used variable names generator [fruit] ( some time )
 -> creating the used variable renamer [readable] ( some time )
 -> creating the used semantics [libc,gcc-general,win-api] ( some time )
Running phase: conversion of LLVM IR into BIR ( some time )
 -> converting global variables ( some time )
 -> converting function signed_char_add ( some time )
 -> converting function signed_char_mult ( some time )
 -> converting function signed_char_div ( some time )
 -> converting function signed_char_modulo ( some time )
 -> converting function unsigned_char_add ( some time )
 -> converting function unsigned_char_mult ( some time )
 -> converting function unsigned_char_div ( some time )
 -> converting function unsigned_char_modulo ( some time )
 -> converting function signed_short_add ( some time )
 -> converting function signed_short_mult ( some time )
 -> converting function signed_short_div ( some time )
 -> converting function signed_short_modulo ( some time )
 -> converting function unsigned_short_add ( some time )
 -> converting function unsigned_short_mult ( some time )
 -> converting function unsigned_short_div ( some time )
 -> converting function unsigned_short_modulo ( some time )
 -> converting function signed_int_add ( some time )
 -> converting function signed_int_mult ( some time )
 -> converting function signed_int_div ( some time )
 -> converting function signed_int_modulo ( some time )
 -> converting function unsigned_int_add ( some time )
 -> converting function unsigned_int_mult ( some time )
 -> converting function unsigned_int_div ( some time )
 -> converting function unsigned_int_modulo ( some time )
 -> converting function signed_long_int_add ( some time )
 -> converting function signed_long_int_mult ( some time )
 -> converting function signed_long_int_div ( some time )
 -> converting function signed_long_int_modulo ( some time )
 -> converting function unsigned_long_int_add ( some time )
 -> converting function unsigned_long_int_mult ( some time )
 -> converting function unsigned_long_int_div ( some time )
 -> converting function unsigned_long_int_modulo ( some time )
 -> converting function signed_long_long_add ( some time )
 -> converting function signed_long_long_mult ( some time )
 -> converting function signed_long_long_div ( some time )
 -> converting function signed_long_long_modulo ( some time )
 -> converting function unsigned_long_long_add ( some time )
 -> converting function unsigned_long_long_mult ( some time )
 -> converting function unsigned_long_long_div ( some time )
 -> converting function unsigned_long_long_modulo ( some time )
 -> converting function main ( some time )
 -> converting function __divdi3 ( some time )
 -> converting function __moddi3 ( some time )
 -> converting function __udivdi3 ( some time )
 -> converting function __umoddi3 ( some time )
Running phase: removing functions from standard libraries ( some time )
Running phase: removing code that is not reachable in a CFG ( some time )
Running phase: signed/unsigned types fixing ( some time )
Running phase: converting LLVM intrinsic functions to standard functions ( some time )
Running phase: obtaining debug information ( some time )
Running phase: alias analysis [simple] ( some time )
Running phase: optimizations ( some time )
 -> running GotoStmtOptimizer ( some time )
 -> running RemoveUselessCastsOptimizer ( some time )
 -> running UnusedGlobalVarOptimizer ( some time )
 -> running DeadLocalAssignOptimizer ( some time )
 -> running SimpleCopyPropagationOptimizer ( some time )
 -> running CopyPropagationOptimizer ( some time )
 #0 0x000000000116d8cb llvm::sys::PrintStackTrace(llvm::raw_ostream&) (RETDECDIR/bin/retdec-decompiler+0x116d8cb)
 #1 0x000000000116bcf4 llvm::sys::RunSignalHandlers() (RETDECDIR/bin/retdec-decompiler+0x116bcf4)
 #2 0x000000000116be22 SignalHandler(int) (RETDECDIR/bin/retdec-decompiler+0x116be22)
 #3 0x00007ff74e2daa20 __restore_rt (/lib64/libpthread.so.0+0x13a20)
 #4 0x00007ff74e14c087 std::_Rb_tree_increment(std::_Rb_tree_node_base*) (/lib64/libstdc++.so.6+0xc5087)
 #5 0x0000000000817980 retdec::llvmir2hll::VarUsesVisitor::stmtHasBeenRemoved(std::shared_ptr<retdec::llvmir2hll::Statement>, std::shared_ptr<retdec::llvmir2hll::Function>) (RETDECDIR/bin/retdec-decompiler+0x817980)
 #6 0x0000000000a3d55c retdec::llvmir2hll::CopyPropagationOptimizer::handleCaseSingleUse(std::shared_ptr<retdec::llvmir2hll::Statement>, std::shared_ptr<retdec::llvmir2hll::Variable>, std::shared_ptr<retdec::llvmir2hll::Statement>) (RETDECDIR/bin/retdec-decompiler+0xa3d55c)
 #7 0x0000000000a420c3 retdec::llvmir2hll::CopyPropagationOptimizer::performOptimization() (RETDECDIR/bin/retdec-decompiler+0xa420c3)
 #8 0x0000000000a42740 retdec::llvmir2hll::CopyPropagationOptimizer::runOnFunction(std::shared_ptr<retdec::llvmir2hll::Function>) (RETDECDIR/bin/retdec-decompiler+0xa42740)
 #9 0x0000000000a1d94b retdec::llvmir2hll::FuncOptimizer::doOptimization() (RETDECDIR/bin/retdec-decompiler+0xa1d94b)
#10 0x0000000000a1dbf9 retdec::llvmir2hll::Optimizer::optimize() (RETDECDIR/bin/retdec-decompiler+0xa1dbf9)
#11 0x0000000000a1e730 retdec::llvmir2hll::OptimizerManager::runOptimizerProvidedItShouldBeRun(std::shared_ptr<retdec::llvmir2hll::Optimizer>) (RETDECDIR/bin/retdec-decompiler+0xa1e730)
#12 0x0000000000a254f6 void retdec::llvmir2hll::OptimizerManager::run<retdec::llvmir2hll::CopyPropagationOptimizer, std::shared_ptr<retdec::llvmir2hll::ValueAnalysis>&, std::shared_ptr<retdec::llvmir2hll::CallInfoObtainer>&>(std::shared_ptr<retdec::llvmir2hll::Module>, std::shared_ptr<retdec::llvmir2hll::ValueAnalysis>&, std::shared_ptr<retdec::llvmir2hll::CallInfoObtainer>&) (RETDECDIR/bin/retdec-decompiler+0xa254f6)
#13 0x0000000000a1e998 retdec::llvmir2hll::OptimizerManager::optimize(std::shared_ptr<retdec::llvmir2hll::Module>) (RETDECDIR/bin/retdec-decompiler+0xa1e998)
#14 0x0000000000c5a04d retdec::llvmir2hll::LlvmIr2Hll::runOptimizations() (RETDECDIR/bin/retdec-decompiler+0xc5a04d)
#15 0x0000000000c5b874 retdec::llvmir2hll::LlvmIr2Hll::runOnModule(llvm::Module&) (RETDECDIR/bin/retdec-decompiler+0xc5b874)
#16 0x00000000019a246e llvm::legacy::PassManagerImpl::run(llvm::Module&) (RETDECDIR/bin/retdec-decompiler+0x19a246e)
#17 0x00000000006cdb20 retdec::decompile(retdec::config::Config&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) (RETDECDIR/bin/retdec-decompiler+0x6cdb20)
#18 0x000000000065ae07 decompile(retdec::config::Config&, ProgramOptions&) (RETDECDIR/bin/retdec-decompiler+0x65ae07)
#19 0x00000000005712d0 main (RETDECDIR/bin/retdec-decompiler+0x5712d0)
#20 0x00007ff74dd7eb75 __libc_start_main (/lib64/libc.so.6+0x27b75)
#21 0x000000000065279e _start (RETDECDIR/bin/retdec-decompiler+0x65279e)
Stack dump:
0.	Program arguments: RETDECDIR/bin/retdec-decompiler --cleanup --no-memory-limit -o from_holdec/int_math_with_constants/ia32_elf_clang_O2/retdec_subject.c from_holdec/int_math_with_constants/ia32_elf_clang_O2/subject.exe 
1.	Running pass 'LLVM IR -> HLL' on module ''.
