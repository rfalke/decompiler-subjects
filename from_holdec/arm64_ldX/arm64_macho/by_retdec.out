Running phase: Unpacking ( some time )
Running phase: Initialization ( some time )
Running phase: Providers initialization ( some time )
Running phase: Input binary to LLVM IR decoding ( some time )
Running phase: LLVM ( some time )
Running phase: x86 address spaces optimization ( some time )
Running phase: x87 fpu register analysis ( some time )
Running phase: Main function identification optimization ( some time )
Running phase: Libgcc idioms optimization ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Conditional branch optimization ( some time )
Running phase: Syscalls optimization ( some time )
Running phase: Stack optimization ( some time )
Running phase: Constants optimization ( some time )
Running phase: Function parameters and returns optimization ( some time )
Running phase: LLVM instruction optimization using RDA ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Simple types recovery optimization ( some time )
Running phase: Disassembly generation ( some time )
Running phase: Assembly mapping instruction removal ( some time )
Running phase: C++ class hierarchy optimization ( some time )
Running phase: Selected functions optimization ( some time )
Running phase: Unreachable functions optimization ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Make all registers local ( some time )
Running phase: Value protection optimization ( some time )
Running phase: LLVM ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Simple types recovery optimization ( some time )
Running phase: Stack pointer operations optimization ( some time )
Running phase: Instruction idioms optimization ( some time )
Running phase: LLVM ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Instruction idioms optimization ( some time )
Running phase: Phi removal ( some time )
Running phase: LLVM ( some time )
Running phase: Value protection optimization ( some time )
Running phase: Generate the current LLVM IR ( some time )
Running phase: Generate the current bitcode ( some time )
Running phase: LLVM IR -> HLL ( some time )
Running phase: initialization ( some time )
 -> loading the input config ( some time )
 -> creating the used HLL writer [c] ( some time )
 -> creating the used alias analysis [simple] ( some time )
 -> creating the used call info obtainer [optim] ( some time )
 -> creating the used evaluator of arithmetical expressions [c] ( some time )
 -> creating the used variable names generator [fruit] ( some time )
 -> creating the used variable renamer [readable] ( some time )
 -> creating the used semantics [libc,gcc-general,win-api] ( some time )
Running phase: conversion of LLVM IR into BIR ( some time )
 -> converting global variables ( some time )
 -> converting function main ( some time )
 -> converting function _dump ( some time )
 -> converting function _full_load_with_ldr ( some time )
 -> converting function _full_load_with_byte_wise_ld1 ( some time )
 -> converting function _full_load_with_8byte_wise_ld1 ( some time )
 -> converting function _half_load_with_8byte_wise_ld1 ( some time )
 -> converting function _full_load_2_regs_with_byte_wise_ld1 ( some time )
 -> converting function _full_load_4_regs_with_byte_wise_ld1 ( some time )
 -> converting function _indexed_ld1__one_byte_at_index_0 ( some time )
 -> converting function _indexed_ld1__one_byte_at_index_3 ( some time )
 -> converting function _indexed_ld1__8_bytes_to_low ( some time )
 -> converting function _indexed_ld1__8_bytes_to_high ( some time )
 -> converting function _repeating_ld1__repeat_first_byte_half ( some time )
 -> converting function _repeating_ld1__repeat_first_byte_full ( some time )
 -> converting function _repeating_ld1__load_first_8_bytes_into_low ( some time )
 -> converting function _repeating_ld1__repeat_8_bytes_to_high ( some time )
 -> converting function _ld2_spread_bytes_to_2_regs ( some time )
 -> converting function _ld2_spread_bytes_to_2_regs__half_ ( some time )
 -> converting function _ld2_spread_8_bytes_items_to_2_regs ( some time )
 -> converting function _indexed_ld2__first_2_bytes_to_2_regs ( some time )
 -> converting function _indexed_ld2__8_bytes_into_lows ( some time )
 -> converting function _indexed_ld2__8_bytes_to_highs ( some time )
 -> converting function _repeating_ld2__first_bytes_full ( some time )
 -> converting function _repeating_ld2__2_bytes_half ( some time )
 -> converting function _ld3_spread_bytes_to_3_regs ( some time )
 -> converting function _ld3_spread_bytes_to_3_regs__half_ ( some time )
 -> converting function _ld3_spread_8_bytes_items_to_3_regs ( some time )
 -> converting function _indexed_ld3__first_2_bytes_to_3_regs ( some time )
 -> converting function _indexed_ld3__8_bytes_into_lows ( some time )
 -> converting function _indexed_ld3__8_bytes_to_highs ( some time )
 -> converting function _repeating_ld3__first_bytes_full ( some time )
 -> converting function _repeating_ld3__2_bytes_half ( some time )
 -> converting function _ld4_spread_bytes_to_4_regs ( some time )
 -> converting function _ld4_spread_bytes_to_4_regs__half_ ( some time )
 -> converting function _ld4_spread_8_bytes_items_to_4_regs ( some time )
 -> converting function _indexed_ld4__first_2_bytes_to_4_regs ( some time )
 -> converting function _indexed_ld4__8_bytes_into_lows ( some time )
 -> converting function _indexed_ld4__8_bytes_to_highs ( some time )
 -> converting function _repeating_ld4__first_bytes_full ( some time )
 -> converting function _repeating_ld4__2_bytes_half ( some time )
Running phase: removing functions from standard libraries ( some time )
Running phase: removing code that is not reachable in a CFG ( some time )
Running phase: signed/unsigned types fixing ( some time )
Running phase: converting LLVM intrinsic functions to standard functions ( some time )
Running phase: obtaining debug information ( some time )
Running phase: alias analysis [simple] ( some time )
Running phase: optimizations [normal] ( some time )
 -> running GotoStmtOptimizer ( some time )
 -> running RemoveUselessCastsOptimizer ( some time )
 -> running UnusedGlobalVarOptimizer ( some time )
 -> running DeadLocalAssignOptimizer ( some time )
 -> running SimpleCopyPropagationOptimizer ( some time )
 -> running CopyPropagationOptimizer ( some time )
 -> running SimplifyArithmExprOptimizer ( some time )
 -> running IfStructureOptimizer ( some time )
 -> running LoopLastContinueOptimizer ( some time )
 -> running PreWhileTrueLoopConvOptimizer ( some time )
 -> running WhileTrueToForLoopOptimizer ( some time )
 -> running WhileTrueToWhileCondOptimizer ( some time )
 -> running IfBeforeLoopOptimizer ( some time )
 -> running LLVMIntrinsicsOptimizer ( some time )
 -> running VoidReturnOptimizer ( some time )
 -> running BreakContinueReturnOptimizer ( some time )
 -> running BitShiftOptimizer ( some time )
 -> running DerefAddressOptimizer ( some time )
 -> running EmptyArrayToStringOptimizer ( some time )
 -> running BitOpToLogOpOptimizer ( some time )
 -> running SimplifyArithmExprOptimizer ( some time )
 -> running UnusedGlobalVarOptimizer ( some time )
 -> running DeadLocalAssignOptimizer ( some time )
 -> running SimpleCopyPropagationOptimizer ( some time )
 -> running CopyPropagationOptimizer ( some time )
 -> running SelfAssignOptimizer ( some time )
 -> running VarDefForLoopOptimizer ( some time )
 -> running VarDefStmtOptimizer ( some time )
 -> running EmptyStmtOptimizer ( some time )
 -> running GotoStmtOptimizer ( some time )
 -> running SimplifyArithmExprOptimizer ( some time )
 -> running DeadCodeOptimizer ( some time )
 -> running DerefToArrayIndexOptimizer ( some time )
 -> running IfToSwitchOptimizer ( some time )
 -> running CCastOptimizer ( some time )
 -> running CArrayArgOptimizer ( some time )
Running phase: variable renaming [readable] ( some time )
Running phase: converting constants to symbolic names ( some time )
Running phase: module validation ( some time )
 -> running BreakOutsideLoopValidator ( some time )
 -> running NoGlobalVarDefValidator ( some time )
 -> running ReturnValidator ( some time )
Running phase: emission of the target code [c] ( some time )
Running phase: finalization ( some time )
Running phase: cleanup ( some time )
